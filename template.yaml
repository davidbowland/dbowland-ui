AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Infrastructure for dbowland.com UI

Parameters:
  AccountId:
    Type: String
    Description: AWS account ID
  Environment:
    Type: String
    Default: prod
    AllowedValues:
      - prod
      - test
    Description: Environment for deploy

Mappings:
  EnvironmentMap:
    prod:
      bucketName: dbowland-ui-source
      certificate: adce1a21-90b4-4120-8548-111215e582f0
      domain: dbowland.com
      zoneId: Z072422417XWM8PIXXSFA
    test:
      bucketName: dbowland-ui-test
      certificate: 6a48cba7-feb9-4de5-8cbf-d383140fcdef
      domain: bowland.link
      zoneId: Z01312547RGU1BYKIJXY

Resources:
  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub
          - 'Access identity for ${Domain}'
          - Domain: !FindInMap [EnvironmentMap, !Ref Environment, domain]

  UiBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !FindInMap [EnvironmentMap, !Ref Environment, bucketName]

  UiBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: UiBucket
    Properties:
      Bucket: !Ref UiBucket
      PolicyDocument:
        Statement:
          - Action: 's3:Get*'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${UiBucket}/*'
            Principal:
              CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId

  UiCloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !FindInMap [EnvironmentMap, !Ref Environment, domain]
        DefaultCacheBehavior:
          AllowedMethods:
            - 'GET'
            - 'HEAD'
            - 'OPTIONS'
          CachePolicyId: '658327ea-f89d-4fab-a63d-7e88639e58f6' # Managed-CachingOptimized
          Compress: true
          DefaultTTL: 0
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: 'redirect-to-https'
        DefaultRootObject: 'index.html'
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - DomainName: !GetAtt UiBucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub
                - 'origin-access-identity/cloudfront/${Identity}'
                - Identity: !Ref OriginAccessIdentity
        PriceClass: 'PriceClass_100'
        ViewerCertificate:
          AcmCertificateArn: !Sub
            - 'arn:aws:acm:us-east-1:${AccountId}:certificate/${Certificate}'
            - Certificate: !FindInMap [EnvironmentMap, !Ref Environment, certificate]
          MinimumProtocolVersion: 'TLSv1.2_2018'
          SslSupportMethod: 'sni-only'

  DomainDns:
    Type: AWS::Route53::RecordSet
    DependsOn: UiCloudfrontDistribution
    Properties:
      AliasTarget:
        DNSName: !GetAtt UiCloudfrontDistribution.DomainName
        EvaluateTargetHealth: false
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront resources HostedZoneId
      HostedZoneId: !FindInMap [EnvironmentMap, !Ref Environment, zoneId]
      Name: !FindInMap [EnvironmentMap, !Ref Environment, domain]
      Type: A

  RedirectBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub
        - '${BucketName}-redirect'
        - BucketName: !FindInMap [EnvironmentMap, !Ref Environment, bucketName]
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: !FindInMap [EnvironmentMap, !Ref Environment, domain]
          Protocol: https

  RedirectBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: RedirectBucket
    Properties:
      Bucket: !Ref RedirectBucket
      PolicyDocument:
        Statement:
          - Action: 's3:Get*'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${RedirectBucket}/*'
            Principal:
              CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId

  RedirectCloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Sub
            - 'www.${Domain}'
            - Domain: !FindInMap [EnvironmentMap, !Ref Environment, domain]
        DefaultCacheBehavior:
          AllowedMethods:
            - 'GET'
            - 'HEAD'
            - 'OPTIONS'
          CachePolicyId: '658327ea-f89d-4fab-a63d-7e88639e58f6' # Managed-CachingOptimized
          Compress: true
          DefaultTTL: 0
          TargetOriginId: S3RedirectOrigin
          ViewerProtocolPolicy: 'redirect-to-https'
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - ConnectionAttempts: 3
            ConnectionTimeout: 10
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginKeepaliveTimeout: 5
              OriginProtocolPolicy: 'http-only'
              OriginReadTimeout: 30
              OriginSSLProtocols:
                - 'TLSv1'
                - 'TLSv1.1'
                - 'TLSv1.2'
            DomainName: !Sub '${RedirectBucket}.s3-website.us-east-2.amazonaws.com'
            Id: S3RedirectOrigin
        PriceClass: 'PriceClass_100'
        ViewerCertificate:
          AcmCertificateArn: !Sub
            - 'arn:aws:acm:us-east-1:${AccountId}:certificate/${Certificate}'
            - Certificate: !FindInMap [EnvironmentMap, !Ref Environment, certificate]
          MinimumProtocolVersion: 'TLSv1.2_2018'
          SslSupportMethod: 'sni-only'

  RedirectDns:
    Type: AWS::Route53::RecordSet
    DependsOn: RedirectCloudfrontDistribution
    Properties:
      AliasTarget:
        DNSName: !GetAtt RedirectCloudfrontDistribution.DomainName
        EvaluateTargetHealth: false
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront resources HostedZoneId
      HostedZoneId: !FindInMap [EnvironmentMap, !Ref Environment, zoneId]
      Name: !Sub
        - 'www.${Domain}'
        - Domain: !FindInMap [EnvironmentMap, !Ref Environment, domain]
      Type: A
